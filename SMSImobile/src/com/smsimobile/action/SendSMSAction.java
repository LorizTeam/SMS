/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.smsimobile.action;

import java.io.UnsupportedEncodingException;
import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.smsimobile.data.SMSTemplateDB;
import com.smsimobile.data.SendSMSDB;
import com.smsimobile.data.TBLCustomer;
import com.smsimobile.form.SendSMSForm;
import com.smsimobile.util.DateUtil;
import com.smsimobile.util.SeparatedString;
import com.smsimobile.util.VerifySMS;
 
public class SendSMSAction extends Action {

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		SendSMSForm sendSMSForm = (SendSMSForm) form;
		HttpSession session = request.getSession();
		String forwardText = null;
		String sendType = sendSMSForm.getSendType();
		
	if(sendType.equals("A")){
		
		VerifySMS verifySMS = new VerifySMS();
		SeparatedString separatedString = new SeparatedString();
		
		int errorCode = 0;
		String errorMsg = null;
		String sender = null;
		String message = null;
		
		try {
			sender = new String(sendSMSForm.getSendName().getBytes("ISO8859-1"), "UTF-8");
			message = new String(sendSMSForm.getDescription().getBytes("ISO8859-1"), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//sender = sendSMSForm.getSender();
		//message = sendSMSForm.getMessage();
		int len = message.length() + 3 + sender.length();
		String recipient = sendSMSForm.getCustID();
		String recipientArray[] = separatedString.separatedToStringArray(recipient);
		List correctRecipient = new ArrayList();
		
    	
		//Check message language
    	int maxMsgLen = 480;
    	String charType = "TEXT";
    	if(verifySMS.isThaiMsg(sender+message)) {
    		maxMsgLen = 210;
    		charType = "UNICODE";
    	}
		String chkPhoneNo = ""; boolean chkPhone = false;
    	//Check Mobile Number
		for(int i=0; i<recipientArray.length; i++) {
			System.out.println("All Recipient [" + recipientArray[i] + "]");
	    	if(verifySMS.isMobileNo(recipientArray[i])) {
	    		System.out.println("Correct Recipient [" + recipientArray[i] + "]\n");
	    		chkPhoneNo = recipientArray[i];
	    		for(int j=0; j<correctRecipient.size(); j++){
	    			String tmpRecipient = (String) correctRecipient.get(j);
	    			if(chkPhoneNo.equals(tmpRecipient)) chkPhone = true;
	    		}
	    		if(chkPhone==false){
	    			correctRecipient.add(recipientArray[i]);
	    		}
	    		
	    	} else {
	    		errorCode = -2;
	    		break;
	    	}
		}
		
	    //Check length is empty ?
	    if(correctRecipient.size() == 0) {
	    	//Recipient No.is not correct!
	    	errorCode = -1;
	    } else if(sender.length() == 0) {
	    	//Empty message!
	    	errorCode = -2;
	    } else if(message.length() == 0) {
	    	//Empty message!
	    	errorCode = -3;
	    } else if(len > maxMsgLen) {
	    	//Empty message!
	    	errorCode = -4;
	    } else {
	    	
	    	System.out.println("Length : " + len);
	    	System.out.println("Language : " + charType);
	    	
	    	//Calculate SMS Cost & User Confirm to Send
	    	List recipientList = new ArrayList();
			int unit = verifySMS.findUnitByMessage(message + " : " + sender);
			double price = 1.0;
			for(int i=0; i<correctRecipient.size(); i++) {
				String tmpRecipient = (String) correctRecipient.get(i);
				//System.out.print("Send Recipient ["+i+"]" + tmpRecipient + "\n");
	    		SendSMSForm smsForm = new SendSMSForm();
	    		smsForm.setCustID(tmpRecipient);
	    		smsForm.setUnit(unit);
	    		smsForm.setCost(unit * price);
	    		recipientList.add(smsForm);
			}
			
			session.setAttribute("recipientList", recipientList);
			session.setAttribute("recipient", recipient);
			session.setAttribute("sender", sender);
			session.setAttribute("message", message);
			//session.setAttribute("sendType", sendType);
			//session.setAttribute("sendDate", sendDate);
			//System.out.print("MESSAGE[บอย] " + message + " : " + sender);
	    }

		String lang = "th";
		if(errorCode < 0) {
			//Error
			if(lang.equalsIgnoreCase("th")) {
				switch(errorCode) {
					case -1 : errorMsg = "คุณกรอกเลขหมายผู้รับไม่ถูกต้อง กรุณากรอกใหม่อีกครั้ง"; break;
					case -2 : errorMsg = "กรุณากรอกชื่อผู้ส่ง"; break;
					case -3 : errorMsg = "กรุณากรอกข้อความ"; break;
					case -4 : errorMsg = "ข้อความเกิน 3 ข้อความ กรุณาลองใหม่อีกครัง"; break;
					case -5 : errorMsg = "ยอดเงินคงเหลือของคุณ ไม่เพียงพอสำหรับการส่ง"; break;
				}
			} else {
				switch(errorCode) {
					case -1 : errorMsg = "Please enter recipient mobile phone number!"; break;
					case -2 : errorMsg = "Please enter your sender!"; break;
					case -3 : errorMsg = "Please enter your message!"; break;
					case -4 : errorMsg = "Your message is over 3 message"; break;
					case -5 : errorMsg = "Your balance is not enough!"; break;
				}					
			}
			request.setAttribute("errorMsg", errorMsg);
			session.setAttribute("recipient", recipient);
			session.setAttribute("sender", sender);
			session.setAttribute("message", message);
			forwardText = "error";
		} else {
			//Successful
			forwardText = "success";		
		}
	}else if(sendType.equals("B")){
		String userName = session.getAttribute("userName").toString();
		String custID = sendSMSForm.getCustID();
		String sender = new String(sendSMSForm.getSendName().getBytes("ISO8859-1"), "UTF-8");
		String message = new String(sendSMSForm.getDescription().getBytes("ISO8859-1"), "UTF-8");
		String date = sendSMSForm.getDate();
		String time = sendSMSForm.getTime();
		DateUtil dateUtil = new DateUtil();
		if(!date.equals("")) date	= dateUtil.CnvToYYYYMMDD(date, '-');
		String dateTime = date+" "+time+":00";
		
		SendSMSDB sendSMSDB = new SendSMSDB();
		VerifySMS verifySMS = new VerifySMS();
		SeparatedString separatedString = new SeparatedString();
		//Check message language
    
    	String recipientArray[] = separatedString.separatedToStringArray(custID);
    	List correctRecipient = new ArrayList();
		String chkPhoneNo = "", telNo = ""; boolean chkPhone = false;
		
		int unit = verifySMS.findUnitByMessage(message + " : " + sender);
		double price = 1.0; double cost = 0;
		cost = unit * price;
    	//Check Mobile Number
		for(int i=0; i<recipientArray.length; i++) {
			System.out.println("All Recipient [" + recipientArray[i] + "]");
	    	if(verifySMS.isMobileNo(recipientArray[i])) {
	    		System.out.println("Correct Recipient [" + recipientArray[i] + "]\n");
	    		chkPhoneNo = recipientArray[i];
	    		for(int j=0; j<correctRecipient.size(); j++){
	    			String tmpRecipient = (String) correctRecipient.get(j);
	    			if(chkPhoneNo.equals(tmpRecipient)) chkPhone = true;
	    		}
	    		if(chkPhone==false){
	    			telNo = recipientArray[i];
	    		}	
	    	}  
	    	
	    	sendSMSDB.AddSMSSchedule(telNo, message, sender, dateTime, unit, cost, userName);
	    	
		}
		
		TBLCustomer tblcustomer = new TBLCustomer();
		List customerList = tblcustomer.GetCustomerList("", "");
		request.setAttribute("customerList", customerList);
		
		SMSTemplateDB smstemplateDB = new SMSTemplateDB();
		List smsTemplateList = smstemplateDB.GetSMSTemplateList("");
		request.setAttribute("smsTemplateList", smsTemplateList);
		
		forwardText = "error";
		
	}else if(sendType.equals("C")){
		
	}
		
		return mapping.findForward(forwardText);
	}
}